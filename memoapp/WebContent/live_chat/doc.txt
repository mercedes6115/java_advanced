
HTTP - 클라이언트가 요청을 보내고 그 요청에 다라 서버가 응답하는 형태 웹 서버가 응답을 보낸 뒤
브라우저와의 통신을 끊어버림  -> 양쪽이 데이터를 동시에 보내는것이 아닌 방식 : 반이중(half - duplex)방식
이러한 http의 약점을 보완하는 방식이 Ajax 서버에 요청을 보내면 서버가 응답하는 방식이기는 하지만 페이지 전체요청이 아닌 
데이터 요청 부분적으로 정보를 갱신할 수 있게된다 
그러나 Ajax도 결국 HTTP를 이용하기 때문에 요청을 보내야만 응답이 오게된다 
변경된 데이터를 가져오기 위해서 버튼을 누르기, 일정시간 주기로 요청을 보내면 번거롭고 자원의 낭비가 발생한다 

따라서 이러한 문제점들을 해결하기 위한 방법이 웹소켓.

웹앱에서 서버와 클라이언트의 통신은 대부분 http를 통해 이루어지고 이것은 영구적인 연결이 아닌 클라이언트가 요청(request)할때만 
응답(respponse)하는 방식으로 통신이 진행된다 이럴경우 서버쪽 데이터가 업데이트 되도록 클아이언트 쪽에는 화면이 변경되지 않는다 
refresh 하지 않는이상 변경된 데이터가 업데이트 되지 않는 문제가 발생한다 이러한 문제를 해결하는 임시방편이 Long pooling, Ajax를 사용해도 
어느 정도는 해결가능하지만 데이터의 빠른 업데이트가 아주 중요한 요소인 앱에서는 실시간 업데이트가 아주 중요하다 
Web socket이 아주 중요하게 사용된다
웹 소켓은 stateful protocol이기 때문에 클라이언트와 한번 연결되면 계속 같은 라인을 사용해서 통신한다 
따라서 http사용시 필요없이 발생되는 트래픽을 피할수도 있다. 또 하나 웹소켓은 http와 같은 포트를 사용하기 때문에 
방화벽등의 재설정도 필요없다는 장점이 있다.
처음 접속에는 http를 사용하지만 일단 접속 확립이 이루어지면 그 이후는 웹소켓 독자의 프로토콜로 이루어진다 
장시간 접속을 전제로 하기때문에 접속한 상태라면 클라이언트나 서버로부터 지속적인 데이터 송신이 가능해진다 
데이터의 송신과 수신에 각각 커넥션을 매번 맺을 필요가 없어져서 하나의 커넥션으로 데이터를 송수신 할수 있게 된다.



